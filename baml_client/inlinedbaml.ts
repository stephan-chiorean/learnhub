/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.87.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n\n    module_format \"esm\"\n}\n",
  "plan.baml": "class FileMetadata {\n  filePath string @description(\"Path to the source code file\")\n}\n\nclass PlanSection {\n  section string @description(\"Title of the domain section\")\n  description string[] @description(\"Bullet points explaining the domain\")\n  files string[] @description(\"Relevant file paths for this section\")\n}\n\nfunction GenerateCodeWalkthrough(fileList: FileMetadata[]) -> PlanSection[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    You are an expert course planner. Given the list of files below, create a structured walkthrough plan grouped into logical implementation domains based on how the project works.\n\n    Group by responsibilities and functionality, NOT folders or filenames. Order sections to reflect natural learning flow:\n    - Server entrypoints and initialization\n    - API and integration layers\n    - Internal and shared logic\n    - Data access and domain logic\n    - Frontend entrypoints and major views\n    - Infrastructure, tooling, and tests\n\n    Focus on creating clear \"checkpoints\" that show the major domains and logical flow. Write descriptions as if an experienced engineer is explaining the system to a peer.\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} Files to analyze:\n    {% for file in fileList %}\n    File: {{ file.filePath }}\n    {% endfor %}\n  \"#\n}\n\ntest BasicFileList {\n  functions [GenerateCodeWalkthrough]\n  args {\n    fileList [\n      {\n        filePath \"src/server.ts\"\n      },\n      {\n        filePath \"src/api/users.ts\"\n      },\n      {\n        filePath \"src/components/Dashboard.tsx\"\n      }\n    ]\n  }\n}\n\ntest ComplexFileList {\n  functions [GenerateCodeWalkthrough]\n  args {\n    fileList [\n      {\n        filePath \"src/index.ts\"\n      },\n      {\n        filePath \"src/api/auth.ts\"\n      },\n      {\n        filePath \"src/api/projects.ts\"\n      },\n      {\n        filePath \"src/db/models/user.ts\"\n      },\n      {\n        filePath \"src/components/Layout.tsx\"\n      },\n      {\n        filePath \"tests/api.test.ts\"\n      }\n    ]\n  }\n}",
  "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}